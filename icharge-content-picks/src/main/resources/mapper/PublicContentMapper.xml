<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lovbe.icharge.dao.PublicContentDao">
    <!-- 更新专栏统计信息 -->
    <insert id="updateColumnStatistic">
        INSERT INTO s_interaction_statistic (uid, type, like_count, comment_count, collect_count, view_count)
        VALUES
        <foreach collection="statisticList" item="statistic" separator=",">
            (#{statistic.uid}, #{statistic.type}, #{statistic.likeCount}, #{statistic.commentCount}, #{statistic.collectCount}, #{statistic.viewCount})
        </foreach>
        ON DUPLICATE KEY UPDATE
            like_count = VALUES(like_count),
            comment_count = VALUES(comment_count),
            collect_count = VALUES(collect_count),
            view_count = VALUES(view_count)
    </insert>
    <!-- 获取专栏信息 -->
    <select id="selectColumnInfo" resultMap="columnInfoMap">
        SELECT
            c.uid,
            c.title,
            c.uri,
            c.user_id,
            c.dir_content_id,
            c.is_public,
            c.enable_comment,
            a.uid articleId,
            a.title articleTitle,
            a.summary articleSummary,
            a.uri articleUri,
            a.published_content_id,
            a.create_time,
            a.update_time
        FROM c_column c
        INNER JOIN c_article a ON c.uid = a.column_id
            AND a.`status` = 'A'
        WHERE
            c.uri = #{uri}
          AND c.`status` = 'A'
    </select>

    <!-- 获取文章列表 -->
    <select id="selectArticleList" resultType="com.lovbe.icharge.common.model.dto.ArticleDo">
        SELECT a.*, c.uri column_uri, c.title column_name, u.domain, u.username
        FROM c_article a
        LEFT JOIN p_user u ON a.user_id = u.uid
        LEFT JOIN c_column c ON a.column_id = c.uid
        WHERE a.uid IN
        <foreach collection="articleIds" item="articleId" separator="," open="(" close=")">
            #{articleId}
        </foreach>
        ORDER BY a.update_time DESC
    </select>

    <!-- 获取专栏列表 -->
    <select id="selectColumnList" resultType="com.lovbe.icharge.common.model.dto.ColumnDo">
        SELECT c.*, u.domain, u.username
        FROM c_column c
        LEFT JOIN p_user u ON c.user_id = u.uid
        WHERE c.uid IN
        <foreach collection="columnIds" item="columnId" separator="," open="(" close=")">
            #{columnId}
        </foreach>
        ORDER BY c.update_time DESC
    </select>

    <!-- 获取用户列表 -->
    <select id="selectUserList" resultType="com.lovbe.icharge.common.model.dto.UserInfoDo">
        SELECT *
        FROM p_user
        WHERE uid IN
        <foreach collection="userIds" item="userId" separator="," open="(" close=")">
            #{userId}
        </foreach>
    </select>

    <!-- 获取精选文章列表 -->
    <select id="selectPublicArticleList" resultMap="publicArticleVoMap">
        SELECT a.*, a.tags tags_str,
               c.uri column_uri, c.title column_name,
               sis.like_count, sis.comment_count, sis.collect_count, sis.view_count
        FROM c_article a
        LEFT JOIN c_column c ON a.column_id = c.uid
        LEFT JOIN s_interaction_statistic sis ON a.uid = sis.uid
        WHERE a.uid IN
        <foreach collection="articleIds" item="articleId" separator="," open="(" close=")">
            #{articleId}
        </foreach>
            AND a.status = 'A'
            AND a.is_public = 1
            AND a.published_content_id IS NOT NULL
    </select>

    <!-- 获取文章统计列表 -->
    <select id="selectStatisticCount" resultType="java.lang.Integer">
        SELECT
            count(*)
        FROM s_interaction_statistic sis
        WHERE sis.type = #{targetType}
          AND sis.STATUS = 'A'
    </select>
    <select id="selectArticleStatisticList" resultType="com.lovbe.icharge.common.model.dto.TargetStatisticDo">
        SELECT
            sis.uid,
            sis.type,
            IF (ca.uid IS NOT NULL, sis.like_count, 0 ) like_count,
            IF (ca.uid IS NOT NULL, sis.comment_count, 0 ) comment_count,
            IF (ca.uid IS NOT NULL, sis.collect_count, 0 ) collect_count,
            IF (ca.uid IS NOT NULL, sis.view_count, 0 ) view_count,
            IF (ca.uid IS NOT NULL, ca.publish_time, null) publish_time
        FROM s_interaction_statistic sis
        LEFT JOIN c_article ca ON sis.uid = ca.uid
            AND ca.is_public = 1
            AND ca.published_content_id IS NOT NULL
            AND ca.publish_time IS NOT NULL
            AND ca.`status` = 'A'
        WHERE sis.type = #{targetType}
          AND sis.STATUS = 'A'
          ORDER BY sis.uid
        LIMIT #{offset}, #{batchSize}
    </select>

    <!-- 获取所有专栏文章列表 -->
    <select id="selectColumnArticleList" resultType="com.lovbe.icharge.common.model.dto.TargetStatisticDo">
        SELECT
            cc.uid,
            sis.like_count,
            sis.comment_count,
            sis.collect_count,
            sis.view_count
        FROM (SELECT * FROM c_column cc WHERE cc.STATUS = 'A' ORDER BY cc.uid LIMIT #{offset}, #{batchSize} ) cc
        INNER JOIN c_article ca ON cc.uid = ca.column_id
            AND ca.`status` = 'A'
        INNER JOIN s_interaction_statistic sis ON ca.uid = sis.uid
    </select>

    <!-- 获取专栏总数 -->
    <select id="selectColumnCount" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM c_column WHERE status = 'A'
    </select>

    <!-- 获取专栏统计信息 -->
    <select id="selectColumnStatisticList" resultType="com.lovbe.icharge.common.model.dto.TargetStatisticDo">
        SELECT
            sis.uid,
            sis.type,
            IF (cc.uid IS NOT NULL, sis.like_count, 0 ) like_count,
            IF (cc.uid IS NOT NULL, sis.comment_count, 0 ) comment_count,
            IF (cc.uid IS NOT NULL, sis.collect_count, 0 ) collect_count,
            IF (cc.uid IS NOT NULL, sis.view_count, 0 ) view_count,
            COUNT(ca.uid) article_count,
            IF (cc.uid IS NOT NULL, cc.create_time, null) publish_time
        FROM s_interaction_statistic sis
        LEFT JOIN c_column cc ON sis.uid = cc.uid
            AND cc.is_public = 1
            AND cc.`status` = 'A'
        LEFT JOIN c_article ca ON ca.column_id = sis.uid
            AND ca.published_content_id IS NOT NULL
            AND ca.is_public = 1
            AND ca.status = 'A'
        WHERE sis.type = #{targetType}
          AND sis.STATUS = 'A'
        GROUP BY sis.uid
        ORDER BY sis.uid
        LIMIT #{offset}, #{batchSize}
    </select>

    <!-- 获取推荐专栏信息 -->
    <select id="selectPublicColumnList" resultMap="recommendColumnVoMap">
        SELECT c.*,
               s.like_count, s.comment_count, s.collect_count, s.view_count,
               COUNT(a.uid) article_count
        FROM c_column c
        LEFT JOIN s_interaction_statistic s ON c.uid = s.uid
        LEFT JOIN c_article a ON c.uid = a.column_id AND a.published_content_id IS NOT NULL
        WHERE c.uid IN
            <foreach collection="columnIds" item="columnId" separator="," open="(" close=")">
                #{columnId}
            </foreach>
            AND c.status = 'A'
            AND c.is_public = 1
        GROUP BY c.uid
        ORDER BY c.update_time DESC
    </select>

    <!-- 获取公开专栏 -->
    <select id="selectPagePublicColumnList" resultMap="recommendColumnVoMap">
        SELECT c.*,
               s.like_count, s.comment_count, s.collect_count, s.view_count
        FROM c_column c
        LEFT JOIN s_interaction_statistic s ON c.uid = s.uid
        WHERE c.status = 'A'
            AND c.is_public = 1
        <if test='data.sortType == "0"'>
            ORDER BY s.view_count DESC
        </if>
        <if test='data.sortType == "1"'>
            ORDER BY s.collect_count DESC
        </if>
        <if test='data.sortType == "2"'>
            ORDER BY c.update_time DESC
        </if>
        LIMIT #{data.offset}, #{data.limit}
    </select>

    <!-- 获取全部用户相关统计，按分页获取 -->
    <select id="selectUserStatisticList" resultType="com.lovbe.icharge.common.model.dto.TargetStatisticDo">
        SELECT
            pu.uid,
            0 type,
            pu.`level` user_level,
            COUNT( ca.uid ) article_count,
            COUNT( DISTINCT cc.uid ) column_count,
            SUM(IFNULL( sis.like_count, 0 )) like_count,
            SUM(IFNULL( sis.view_count, 0 )) view_count,
            SUM(IFNULL( sis.collect_count, 0 )) collect_count,
            SUM(IFNULL( sis.comment_count, 0 )) comment_count,
            pu.create_time publish_time
        FROM
            (
                SELECT uid, LEVEL, create_time
                FROM `p_user`
                WHERE `status` = 'A'
                ORDER BY create_time
                LIMIT #{offset}, #{limit}
            ) pu
        LEFT JOIN c_article ca ON pu.uid = ca.user_id
            AND ca.`status` = 'A'
            AND ca.published_content_id IS NOT NULL
            AND ca.is_public = 1
        LEFT JOIN c_column cc ON cc.uid = ca.column_id
            AND cc.`status` = 'A'
            AND cc.is_public = 1
        LEFT JOIN s_interaction_statistic sis ON ca.uid = sis.uid
        GROUP BY pu.uid
    </select>

    <!-- 通过userId或者columnId获取公开文章列表 -->
    <select id="selectArticleListByTarget" resultMap="publicArticleVoMap">
        SELECT a.*, a.tags tags_str,
               c.uri column_uri, c.title column_name,
               sis.like_count, sis.comment_count, sis.collect_count, sis.view_count
        FROM c_article a
        LEFT JOIN c_column c ON a.column_id = c.uid
        LEFT JOIN s_interaction_statistic sis ON a.uid = sis.uid
        WHERE a.status = 'A'
            <if test="searchDTO.userId != null">
                AND a.user_id = #{searchDTO.userId}
            </if>
            <if test="searchDTO.columnId != null">
                AND a.column_id = #{searchDTO.columnId}
            </if>
            <if test="userId != null">
                AND CASE WHEN a.user_id = #{userId} THEN 1 = 1
                ELSE a.is_public = 1 AND a.published_content_id IS NOT NULL
                END
            </if>
            <if test="userId == null">
                AND a.is_public = 1
                AND a.published_content_id IS NOT NULL
            </if>
    </select>

    <!-- 获取用户相关统计数据 -->
    <select id="selectUserStatisticListByIds" resultType="com.lovbe.icharge.common.model.dto.TargetStatisticDo">
        SELECT
            pu.uid,
            psis.fans_count,
            COUNT( ca.uid ) article_count,
            SUM(IFNULL( sis.like_count, 0 )) like_count,
            SUM(IFNULL( sis.view_count, 0 )) view_count,
            SUM(IFNULL( sis.collect_count, 0 )) collect_count,
            SUM(IFNULL( sis.comment_count, 0 )) comment_count,
            pu.create_time publish_time
        FROM `p_user` pu
        LEFT JOIN s_interaction_statistic psis ON pu.uid = psis.uid
        LEFT JOIN c_article ca ON pu.uid = ca.user_id
            AND ca.`status` = 'A'
            AND ca.published_content_id IS NOT NULL
            AND ca.is_public = 1
        LEFT JOIN s_interaction_statistic sis ON ca.uid = sis.uid
        WHERE pu.uid IN
        <foreach collection="userIds" item="uid" separator="," open="(" close=")">
            #{uid}
        </foreach>
        GROUP BY pu.uid
    </select>

    <!-- 根据uri获取文档信息 -->
    <select id="selectArticleInfo" resultType="com.lovbe.icharge.common.model.dto.ArticleDo">
        SELECT c.*,
               ci.uid collect_id,
               IFNULL(cis.like_count, 0) likeCount,
               IFNULL(cis.comment_count, 0) commentCount,
               IFNULL(cis.collect_count, 0) collectCount,
               IFNULL(cis.view_count, 0) viewCount
        FROM c_article c
        LEFT JOIN s_interaction_statistic cis ON c.uid = cis.uid
        LEFT JOIN p_collect_item ci ON c.uid = ci.target_id
            AND ci.user_id = #{userId}
            AND ci.status = 'A'
        WHERE c.uri = #{uri}
          AND c.status = 'A';
    </select>

    <!-- 获取随笔信息  -->
    <select id="getRamblyJotInfo" resultType="com.lovbe.icharge.common.model.dto.RamblyJotDo">
        SELECT ce.*,
               IFNULL(sis.like_count, 0) like_count,
               IFNULL(sis.comment_count, 0) comment_count
        FROM c_essay ce
        LEFT JOIN s_interaction_statistic sis ON ce.uid = sis.uid
        WHERE ce.uid = #{ramblyJotId}
          AND ce.status = 'A'
    </select>

    <!-- 获取公开随笔信息 -->
    <select id="selectPublicEssayList" resultType="com.lovbe.icharge.common.model.dto.RamblyJotDo">
        SELECT
            ce.*,
            ce.preview_img preview_img_str,
            sis.like_count,
            sis.comment_count
        FROM
            (
                SELECT uid
                FROM c_essay WHERE is_public = 1
                    AND publish_status = 3
                    AND `status` = 'A'
                ORDER BY create_time DESC
                LIMIT 0, 20
            ) tid
        INNER JOIN c_essay ce ON tid.uid = ce.uid
        LEFT JOIN s_interaction_statistic sis ON tid.uid = sis.uid
    </select>

    <resultMap id="columnInfoMap" type="com.lovbe.icharge.common.model.dto.ColumnDo">
        <id column="uid" property="uid"/>
        <result column="title" property="title"/>
        <result column="uri" property="uri"/>
        <result column="user_id" property="userId"/>
        <result column="dir_content_id" property="dirContentId"/>
        <result column="is_public" property="isPublic"/>
        <result column="enable_comment" property="enableComment"/>
        <collection column="articleId" property="articleList" ofType="com.lovbe.icharge.common.model.dto.ArticleDo">
            <id column="articleId" property="uid"/>
            <result column="articleTitle" property="title"/>
            <result column="articleSummary" property="summary"/>
            <result column="articleUri" property="uri"/>
            <result column="published_content_id" property="publishedContentId"/>
            <result column="create_time" property="createTime"/>
            <result column="update_time" property="updateTime"/>
        </collection>
    </resultMap>

    <resultMap id="publicArticleVoMap" type="com.lovbe.icharge.entity.vo.FeaturedArticleVo">
        <id property="uid" column="uid"/>
        <result property="title" column="title"/>
        <result property="uri" column="uri"/>
        <result property="userInfo.uid" column="user_id"/>
        <result property="columnId" column="column_id"/>
        <result property="columnUri" column="column_uri"/>
        <result property="columnName" column="column_name"/>
        <result property="summary" column="summary"/>
        <result property="coverUrl" column="cover_url"/>
        <result property="tagsStr" column="tags_str"/>
        <result property="likeCount" column="like_count"/>
        <result property="viewCount" column="view_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="collectCount" column="collect_count"/>
    </resultMap>

    <resultMap id="recommendColumnVoMap" type="com.lovbe.icharge.entity.vo.RecommendColumnVo">
        <id property="uid" column="uid"/>
        <result property="title" column="title"/>
        <result property="uri" column="uri"/>
        <result property="userInfo.uid" column="user_id"/>
        <result property="synopsis" column="synopsis"/>
        <result property="coverUrl" column="cover_url"/>
        <result property="articleCount" column="article_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="viewCount" column="view_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="collectCount" column="collect_count"/>
    </resultMap>
</mapper>
